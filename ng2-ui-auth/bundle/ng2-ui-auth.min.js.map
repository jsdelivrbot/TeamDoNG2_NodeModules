{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.service.ts","../src/config.service.ts","../src/storage.service.ts","../src/shared.service.ts","../src/jwt-http.service.ts","../src/popup.service.ts","../src/oauth1.service.ts","../src/oauth2.service.ts","../src/oauth.service.ts","../src/auth.service.ts","../src/ng2-ui-auth.module.ts"],"sourcesContent":["/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function assign(target: any, ...src: any[]): any {\r\n    if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var source = arguments[index];\r\n        if (source != null) {\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}","import {Injectable} from '@angular/core';\r\nimport {SharedService} from './shared.service';\r\nimport {ConfigService} from './config.service';\r\nimport {RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class LocalService {\r\n    constructor(private http: JwtHttp,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Response} from '@angular/http';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    oauthType?: string;\r\n    exchangeForToken?: boolean | ((options: {code?: string, state?: string}, userData?: any) => Observable<Response>);\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[]|string;\r\n    display?: string;\r\n}\r\n\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\n\r\nexport abstract class CustomConfig {\r\n    tokenRoot: string;\r\n    cordova: boolean;\r\n    baseUrl: string;\r\n    loginUrl: string;\r\n    signupUrl: string;\r\n    unlinkUrl: string;\r\n    tokenName: string;\r\n    tokenSeparator: string;\r\n    tokenPrefix: string;\r\n    authToken: string;\r\n    authHeader: string;\r\n    storageType: string;\r\n    providers: IProviders;\r\n    defaultHeaders: { [name: string]: string };\r\n    withCredentials: boolean;\r\n    autoRefreshToken: boolean;\r\n    refreshUrl: string;\r\n    resolveToken: (response: Response) => string;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    constructor(config?: CustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (typeof config[key] === \"undefined\") {\r\n                return;\r\n            }\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    refreshUrl = '/auth/refresh';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    autoRefreshToken = false;\r\n    cordova = !!window['cordova'];\r\n    resolveToken = (response: Response) => {\r\n        const accessToken: string | Object | null | undefined = response && response.json() &&\r\n            (response.json().access_token || response.json().token || response.json().data);\r\n        if (!accessToken) {\r\n            console.warn('No token found');\r\n            return null;\r\n        }\r\n        if (typeof accessToken === 'string') {\r\n            return accessToken;\r\n        }\r\n        if (typeof accessToken !== 'object') {\r\n            console.warn('No token found');\r\n            return null;\r\n        }\r\n        const tokenRootData = this.tokenRoot &&\r\n            this.tokenRoot.split('.').reduce(\r\n                (o, x) => {\r\n                    return o[x];\r\n                },\r\n                accessToken);\r\n        const token = tokenRootData ? tokenRootData[this.tokenName] : accessToken[this.tokenName];\r\n        if (token) {\r\n            return token;\r\n        }\r\n        let tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\r\n        console.warn('Expecting a token named \"' + tokenPath);\r\n        return null;\r\n    };\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display', 'state'],\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 452, height: 633},\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            oauthType: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            oauthType: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        },\r\n        spotify: {\r\n            name: 'spotify',\r\n            url: '/auth/spotify',\r\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['state'],\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user-read-email'],\r\n            scopePrefix: '',\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: { width: 500, height: 530 },\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConfigService} from './config.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class StorageService {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: ConfigService) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {ConfigService} from './config.service';\r\nimport {StorageService} from './storage.service';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class SharedService {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: StorageService, private config: ConfigService) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            token = this.config.resolveToken(response)\r\n        }\r\n\r\n        if (token) {\r\n            this.storage.set(this.tokenName, token);\r\n        }\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request, RequestOptions, ConnectionBackend} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\r\n    autoRefreshToken?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: SharedService,\r\n                private _config: ConfigService) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        //if the token is expired the \"getExpirationDate\" function returns null\r\n        if (this._shared.getToken() && !this._shared.getExpirationDate() &&\r\n            options.autoRefreshToken ||\r\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken) {\r\n            return this.refreshToken()\r\n                .switchMap(() => this.actualRequest(url, options));\r\n        }\r\n        return this.actualRequest(url, options);\r\n    }\r\n\r\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n\r\n    refreshToken(): Observable<Response> {\r\n        const authHeader = new Headers();\r\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\r\n        return super\r\n            .get(this._config.refreshUrl, {\r\n                headers: authHeader\r\n            })\r\n            .do((res: Response) => this._shared.setToken(res));\r\n    }\r\n\r\n    private actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign} from './utils';\r\nimport {ConfigService, IPopupOptions} from './config.service';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\n\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class PopupService {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return assign(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: ConfigService) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = PopupService.stringifyOptions(PopupService.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .fromEvent<Event>(this.popupWindow, 'loadstart')\r\n            .switchMap((event: Event & { url: string }) => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return Observable.of('Popup Window Closed');\r\n                }\r\n                if (event.url.indexOf(redirectUri) !== 0) {\r\n                    return Observable.empty();\r\n                }\r\n\r\n                let parser = document.createElement('a');\r\n                parser.href = event.url;\r\n\r\n                if (parser.search || parser.hash) {\r\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                    const hash = PopupService.parseQueryString(hashParams);\r\n                    const qs = PopupService.parseQueryString(queryParams);\r\n                    const allParams = assign({}, qs, hash);\r\n\r\n                    this.popupWindow.close();\r\n\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return Observable.of(allParams);\r\n                    }\r\n                }\r\n                return Observable.empty();\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .switchMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return Observable.of('Popup Window Closed');\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    const hash = PopupService.parseQueryString(hashParams);\r\n                    const qs = PopupService.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    const allParams = assign({}, qs, hash);\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return Observable.of(allParams);\r\n                    }\r\n                }\r\n                return Observable.empty();\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PopupService} from './popup.service';\r\nimport {Response} from '@angular/http';\r\nimport {joinUrl, assign} from './utils';\r\nimport {ConfigService, IOauth1Options} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1Service {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n    constructor(private http: JwtHttp, private popup: PopupService, private config: ConfigService) {}\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = assign({}, Oauth1Service.base, options);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .switchMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .switchMap((response) => {\r\n                let exchangeForToken: any = options.exchangeForToken;\r\n                if (typeof exchangeForToken !== 'function') {\r\n                    exchangeForToken = this.exchangeForToken.bind(this);\r\n                }\r\n                return exchangeForToken(response, userData);\r\n            });\r\n    }\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = assign({}, this.defaults, oauthData, userData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\r\n    }\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign, joinUrl, merge, camelCase} from './utils';\r\nimport {ConfigService, IOauth2Options} from './config.service';\r\nimport {PopupService} from './popup.service';\r\nimport {StorageService} from './storage.service';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/observable/of';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2Service {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: JwtHttp,\r\n                private popup: PopupService,\r\n                private storage: StorageService,\r\n                private config: ConfigService) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2Service.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .switchMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (!options.exchangeForToken && (this.defaults.responseType === 'token' || !this.defaults.url)) {\r\n                    return Observable.of(oauthData);\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n                let exchangeForToken: any = options.exchangeForToken;\r\n                if (typeof exchangeForToken !== 'function') {\r\n                    exchangeForToken = this.exchangeForToken.bind(this);\r\n                }\r\n                return exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: {code?: string, state?: string}, userData?: {}) {\r\n        let data: any = assign({}, this.defaults, oauthData, userData);\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    keyValuePairs.push([paramName, paramValue]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function(pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {SharedService} from './shared.service';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {ConfigService, IOauth1Options} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class OauthService {\r\n    constructor(private http: JwtHttp,\r\n                private injector: Injector,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        const provider: { open(options?: IOauth1Options, userData?: any): Observable<Response> } = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : this.injector.get(Oauth2Service);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {SharedService} from './shared.service';\r\nimport {LocalService} from './local.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    constructor(private shared: SharedService,\r\n                private local: LocalService,\r\n                private oauth: OauthService) {\r\n    }\r\n\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.signup(user, opts);\r\n    }\r\n\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n\r\n    setToken(token: string | Response): void {\r\n        this.shared.setToken(token);\r\n    }\r\n\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 25/12/2015.\r\n */\r\n\r\nimport {CustomConfig, ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\nimport {JwtHttp} from './jwt-http.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {PopupService} from './popup.service';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {LocalService} from './local.service';\r\nimport {AuthService} from './auth.service';\r\nimport {StorageService} from './storage.service';\r\nimport {ModuleWithProviders, NgModule, Injector} from '@angular/core';\r\nimport {HttpModule, RequestOptions, XHRBackend} from '@angular/http';\r\nimport {Type} from '@angular/core/src/type';\r\nexport {LocalService} from './local.service';\r\nexport {Oauth2Service} from './oauth2.service';\r\nexport {Oauth1Service} from './oauth1.service';\r\nexport {PopupService} from './popup.service';\r\nexport {OauthService} from './oauth.service';\r\nexport {JwtHttp} from './jwt-http.service';\r\nexport {SharedService} from './shared.service';\r\nexport {StorageService} from './storage.service';\r\nexport {AuthService} from './auth.service';\r\nexport {ConfigService, CustomConfig} from './config.service';\r\n\r\n@NgModule({\r\n    imports: [HttpModule]\r\n})\r\nexport class Ng2UiAuthModule {\r\n    static getWithConfig(config: Type<CustomConfig>): ModuleWithProviders {\r\n        return {\r\n            ngModule: Ng2UiAuthModule,\r\n            providers: [\r\n                {provide: CustomConfig, useClass: config },\r\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\r\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\r\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\r\n                {provide: JwtHttp, useClass: JwtHttp, deps: [XHRBackend, RequestOptions, SharedService, ConfigService]},\r\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\r\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\r\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\r\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\r\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\r\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\r\n        }\r\n    }\r\n}"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","window","response","accessToken","json","access_token","token","data","console","warn","tokenRootData","_this","tokenRoot","split","reduce","o","x","tokenName","tokenPath","facebook","authorizationEndpoint","redirectUri","location","origin","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","provider","providers","prop","ConfigService","Injectable","isStorageAvailable","supported","storageType","substring","setItem","removeItem","e","StorageService","getItem","store","value","storage","tokenPrefix","tokenSeparator","SharedService","get","getToken","base64Url","base64","parse","decodeURIComponent","atob","resolveToken","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","type","_backend","_defaultOptions","_shared","_config","_super","__extends","JwtHttp","options","getExpirationDate","autoRefreshToken","refreshToken","switchMap","actualRequest","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","Http","PopupService","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","event","closed","of","empty","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","http","popup","Oauth1Service","userData","defaults","base","serverUrl","joinUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","bind","oauthData","exchangeForTokenUrl","withCredentials","Oauth2Service","openPopup","stateName","responseType","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","shared","OauthService","unlinkUrl","LocalService","fullOpts","getFullOpts","loginUrl","signupUrl","local","oauth","AuthService","login","signup","logout","authenticate","unlink","removeToken","setStorageType","Ng2UiAuthModule","ngModule","provide","CustomConfig","useClass","deps","XHRBackend","RequestOptions","Injector","NgModule","imports","HttpModule"],"mappings":"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"}